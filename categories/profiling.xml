<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Journey to the Center of the Computer (profiling)</title><link>https://markdewing.github.io/blog/</link><description></description><atom:link href="https://markdewing.github.io/blog/categories/profiling.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Mon, 12 Oct 2015 17:23:11 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Prototype for Profiling Python</title><link>https://markdewing.github.io/blog/posts/prototype-for-profiling-python/</link><dc:creator>Mark Dewing</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://markdewing.github.io/blog/posts/towards-profiling-accelerated-python/"&gt;Last post&lt;/a&gt; covered some technical background using vmprof to profile Python with compiled or JIT'ed extensions.
Now I've created a prototype that can convert the output to callgrind format so it can be viewed with &lt;a href="http://kcachegrind.sourceforge.net/html/Home.html"&gt;KCachegrind&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To install the prototype using the Anaconda distribution:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new environment (if you do not use a new environment, these packages may conflict with an existing Numba install): &lt;code&gt;conda create -n profiling python numpy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Switch to the new environment: &lt;code&gt;source activate profiling&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install prototype versions of Numba and llvmlite: &lt;code&gt;conda install -c https://conda.anaconda.org/mdewing numba-profiling&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install prototype version of vmprof: &lt;code&gt;conda install -c https://conda.anaconda.org/mdewing vmprof-numba&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make sure libunwind is installed.  (On Ubuntu &lt;code&gt;apt-get install libunwind8-dev&lt;/code&gt;.)
(On Ubuntu, it must be the -dev version.  If not installed, the error message when trying to run vmprof is &lt;code&gt;ImportError: libunwind.so.8: cannot open shared object file: No such file or directory&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Install KCachegrind (On Ubuntu, &lt;code&gt;apt-get install kcachegrind&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is a wrapper (&lt;code&gt;vmprofrun&lt;/code&gt;) that automates the running and processing steps.
To use it, run &lt;code&gt;vmprofrun &amp;lt;target python script&amp;gt; [arguments to the python script]&lt;/code&gt;. 
(No need to specify &lt;code&gt;python&lt;/code&gt; - that gets added to the command line automatically.)
By default it will output &lt;code&gt;vmprof-&amp;lt;pid&amp;gt;.out&lt;/code&gt;, which can be viewed in KCachegrind.&lt;/p&gt;
&lt;p&gt;Underneath, the &lt;code&gt;vmprofrun&lt;/code&gt; tool saves the vmprof output during the run to &lt;code&gt;out.vmprof&lt;/code&gt;. After the run, it automatically copies the &lt;code&gt;/tmp/perf-&amp;lt;pid&amp;gt;.map&lt;/code&gt; file to the current directory (if running under Numba).
It moves &lt;code&gt;out.vmprof&lt;/code&gt; to &lt;code&gt;out-&amp;lt;pid&amp;gt;.vmprof&lt;/code&gt;.
Finally it runs &lt;code&gt;vmproftocallgrind&lt;/code&gt; using these files as input.&lt;/p&gt;
&lt;h4&gt;Limitations&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Only works on 64-bit Linux&lt;/li&gt;
&lt;li&gt;Function-level profiles only - no line information (for either python or native code)&lt;/li&gt;
&lt;li&gt;Sometimes the profiling hangs during the run - kill the process and try again.&lt;/li&gt;
&lt;li&gt;Works with Python 2.7 or 3.4&lt;/li&gt;
&lt;li&gt;Not well validated or tested yet&lt;/li&gt;
&lt;li&gt;It does not work well yet with the existing vmprof web visualization and CLI tools.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Other notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The stack dump tool will process the stacks to remove the Python interpreter frames.&lt;/li&gt;
&lt;li&gt;By default the Numba &lt;code&gt;Dispatcher_call&lt;/code&gt; level is removed.  Otherwise the call graph in KCachegrind gets tangled by all the call paths running through this function.&lt;/li&gt;
&lt;li&gt;It should work with C extensions and Cython as well.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>Numba</category><category>profiling</category><category>python</category><category>vmprof</category><guid>https://markdewing.github.io/blog/posts/prototype-for-profiling-python/</guid><pubDate>Mon, 12 Oct 2015 17:20:00 GMT</pubDate></item></channel></rss>